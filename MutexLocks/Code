#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>


#define INPUT_END -(int)10
#define FACTOR_END -(int)11
#define WAIT 0

int *read_buffer;
int *write_buffer;

int *read_buffer, *write_buffer, read_count, write_count;

pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t mutex2 = PTHREAD_MUTEX_INITIALIZER;

void * producer(void * ptr) {

	int i, count, n;
	count = 0;
	while (read_buffer[count] != INPUT_END){
		while (read_buffer[count] == WAIT);
		n = read_buffer[count];
		pthread_mutex_lock(&mutex2);
		write_buffer[write_count++] = n;
		pthread_mutex_unlock(&mutex2);

		for(i = 2; i * i <= n; i++){
			while(n % i == 0){
				pthread_mutex_lock(&mutex2);
				write_buffer[write_count++] = i;
				pthread_mutex_unlock(&mutex2);
				n = n / i;
			}

		}
		if(i > 2){
			pthread_mutex_lock(&mutex2);
			write_buffer[write_count++] = n;
			pthread_mutex_unlock(&mutex2);
		}
		pthread_mutex_lock(&mutex2);
		write_buffer[write_count++] = FACTOR_END;
		pthread_mutex_unlock(&mutex2);
		count++;
	}
	write_buffer[write_count++] =INPUT_END;
	return NULL;
}

void * consumer(void * ptr) {
	int count = 0;

	while (write_buffer[count] != INPUT_END){
		while (write_buffer[count] == WAIT);
		printf("%d: ", write_buffer[count++]);
		
		while (write_buffer[count] != FACTOR_END)
			printf("%d ", write_buffer[count++]);
		count++;	

		printf("\n");
		
	}
	return NULL;
}

int main(int argc, char *argv[]) {

	pthread_t prime;
	pthread_t print;
	
	read_buffer = calloc(argc, sizeof(int));
	write_buffer = calloc(argc * 16, sizeof(int)); 
	
	pthread_create(&prime, NULL, consumer, NULL);
	pthread_create(&print, NULL, producer, NULL);

	int i;
	for (i = 1; i < argc; i++){
		pthread_mutex_lock(&mutex1);
		read_buffer[read_count++] = atoi(argv[i]);
		pthread_mutex_unlock(&mutex1);
	}

	pthread_mutex_lock(&mutex1);
	read_buffer[read_count++] = INPUT_END;
	pthread_mutex_unlock(&mutex1);
	
	pthread_join(prime, NULL);
	pthread_join(print, NULL);

	return 0;
}
