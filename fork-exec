/*This program will call the fork() system call at the very start. The parent process will display a message indicating it has started and will then wait for a specific child process ID to complete. Once the child process has completed, the parent process will display a message indicating that the child is complete and the parent will now terminate.

The child process will display a message indicating that it has started. If one or more arguments were provided on the command line, the child process will perform the appropriate exec() system call to load the new executable into memory with the appropriate arguments if provided. If no arguments were provided, the child process will display a message indicating that it will terminate.*/



#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) 
{
	int val;
	
	val = fork();
	if ( val == -1) {
		perror("Process Failire");
		exit(-1);
	}
	else if ( val == 0 ) { 
		printf("CHILD started. ");
		if (argc == 2){
			printf("One argument provided. Calling execlp(),never to return(sniff)\n");
			execlp(argv[1], argv[1], NULL);
			perror("exec failed");
			exit(-1);
		}
		else if (argc > 2){
			printf("More than one argument provided. Calling execvp(),never to return(sniff)\n");
			execvp(argv[1], &argv[1]);
			perror("exec failed");
		}
		else {
			printf("No arguments provided. Terminating child.\n");
		}
	} else { 
		printf("PARENT started, now waiting for process ID #%d\n", val);
		wait(&val);
		printf("PARENT resumed.Child exit code of %d.Now terminating parent\n", WEXITSTATUS(val) );
	}	
	return 0;
}
